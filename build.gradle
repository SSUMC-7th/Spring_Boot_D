plugins {
	id 'java'
	id 'org.springframework.boot' version '3.0.0'
	id 'io.spring.dependency-management' version '1.0.15.RELEASE'
	id "com.ewerk.gradle.plugins.querydsl" version "1.0.10"
}

group = 'com.example'
version = '1.0.0'
sourceCompatibility = '17'

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.hibernate.orm:hibernate-core:6.0.2.Final'  // Hibernate 6.0.2 이상
	implementation 'mysql:mysql-connector-java:8.0.33'  // MySQL 드라이버 추가
	implementation 'org.hibernate.validator:hibernate-validator:7.0.5.Final' // Hibernate Validator 추가
	implementation 'jakarta.validation:jakarta.validation-api:3.0.2' // Jakarta Validation API
	implementation 'org.springframework.boot:spring-boot-starter-validation'

	// queryDSL
	implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'
	annotationProcessor "com.querydsl:querydsl-apt:5.0.0:jakarta"
	annotationProcessor "jakarta.annotation:jakarta.annotation-api"
	annotationProcessor "jakarta.persistence:jakarta.persistence-api"


	implementation 'com.fasterxml.jackson.core:jackson-databind:2.15.0'
	implementation 'com.fasterxml.jackson.core:jackson-annotations:2.15.0'
	implementation 'com.fasterxml.jackson.core:jackson-core:2.15.0'

	implementation 'org.antlr:antlr4-runtime:4.10'
	compileOnly 'org.projectlombok:lombok:1.18.22'
  
	annotationProcessor 'org.projectlombok:lombok:1.18.22'

	testImplementation 'org.springframework.boot:spring-boot-starter-test'

	// 에러 핸들러를 만들기 위해 validation과 관련된 기능을 사용하기 위한 의존성 추가
	implementation 'org.springframework.boot:spring-boot-starter-validation'

	// Swagger 세팅
	implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.3.0'

	implementation 'org.springdoc:springdoc-openapi-ui:1.7.0'
	implementation 'org.springdoc:springdoc-openapi-data-rest:1.7.0'

	testImplementation 'org.springframework.boot:spring-boot-starter-test'
}

clean {
	delete fileTree(dir: 'src/main/generated', include: '**/*.java')
}

tasks.withType(JavaCompile) {
	options.compilerArgs += [
			'--add-opens',
			'java.base/java.lang=ALL-UNNAMED',
			'--add-opens',
			'java.base/java.util=ALL-UNNAMED'
	]
}


sourceSets {
	main {
		java {
			srcDirs = ['src/main/java', 'src/main/resources', 'src/main/generated']
		}
	}
}

tasks.named('test') {
	useJUnitPlatform()
}

// Querydsl 설정부
def generated = 'src/main/generated'

querydsl {
	jpa = true
	querydslSourcesDir = generated
}
sourceSets {
	main.java.srcDir generated
}

compileQuerydsl{
	options.annotationProcessorPath = configurations.querydsl
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
	querydsl.extendsFrom compileClasspath
}